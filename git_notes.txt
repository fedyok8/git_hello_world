VCS - version control system
centralized or distributed
repository
commit
hash function
tracked or untracked
tracked = {modified | staged | committed}
index (staging area)	pull of files or directories in staged state
комит файла, который модифицировался ещё и после добавления в индекс не закомитит последние изменения
.gitignore - файл для описания исключения для git
fastforward - механизм мёрджа(git merge ...) для веток
метка слежения
сервер принимает правки через pull если это можно сделать с помощью fastforward







git config --system
	все пользователи системы
git config --global
	конкретный пользователь системы
git config --local
	текущий репозиторий
git config --global user.name "fedyok8"
git config --global user.email fedyok8@yandex.ru
git init
git log
	история изменений и информация о хэш сумме комитов
git status
	статус всех файлов
git add app.py
	добавить файл в index
git commit -m "bug fixes 1"
	закомитить с сообщением "..."
git log -p
	история комитов с кратким описанием изменений
git restore app.py
	откатить изменения к последнему комиту для файла, который modified
git diff
	отобразить изменения после последнего комита
git diff --staged
	отобразить изменения после последнего комита, находящиеся в index
git commit -am "bug fixes 3"
	закомитить изменения во всех трэкаемых файлах
git mv app.py application.py
	переименовать файл(автоматически добавляет в index)
git rm application.py
	удалить файл(автоматически добавляет в index)
git restore --staged application.py
	восстанавливает удаленный файл из index
git restore application.py
	восстанавливает удаленный файл
git rm --cached application.py
	удаляет файл(авто index), но не удаляет сам файл, делая его untracked
git branch new-api
	создать новую ветку
git checkout new-api
	переключиться на ветку new-api
git branch -a
	посмотреть, какие ветки есть в репозитории
git merge bugfix
	выполнить слияние текущей ветки и ветки bugfix
git branch -d bugfix
	удалить ветку bugfix (чтобы удалить несмёрдженную ветку, нужно вместо -d поставить -D но это опасно)
git checkout e375e1befbef6970a66770ee6e8235051edd65ef
	переключить HEAD на конкретный коммит
git checkout -b dev
	создать ветку и переместить на нее HEAD
git checkout -b new-branch e375e1befbef6970a66770ee6e8235051edd65ef
	создать ветку от конкретного коммита и переместить на неё HEAD
git checkout test.txt
	вернуть состояние файла к состоянию последнего коммита в этой ветке (как git restore)
git reset --hard e375e1befbef6970a66770ee6e8235051edd65ef
	переставляет указатель текущей ветки(вместе с HEAD) на конкретный коммит
git remote add origin https://github.com/fedyok8/git_hello_world.git
	добавить удаленный сервер origin
git remote -v
	посмотреть, какие есть репозитории
git push origin master
	отправить изменения на сервер
git clone https://github.com/fedyok8/git_hello_world.git
	скопировать к себе репозиторий
git pull origin master
	забирает изменения с удаленного сервера
	git pull =git {fatch+merge}
git fetch origin
	получить актуальную информацию о состоянии удаленных веток и обновить метку слежения
git merge origin/master
	мёрдж своей локальной ветки с удаленной
git push --set-upstream origin master
	связывает локальную ветку master с origin
	один раз выполнив эту команду можно теперь писать не
	git push origin master
	а просто (находясь на ветке master)
	git push
git push origin master -f
	форсированный пуш с переписыванием истории комитов если необходимо



















